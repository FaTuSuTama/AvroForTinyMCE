var AvroPhonetic = function(v, x, y) {
    return new function(v, x, y) {
        function z() {}

        function A() {
            this._init()
        }

        function B(a, b, c) {
            "function" == typeof a && (this._loadCandidateSelectionsFromFile = a);
            "function" == typeof b && (this._saveCandidateSelectionsToFile = b);
            this._init()
        }
        var h = {},
            m, p = function(a) {
                h[m] = {};
                for (dkeys in a) h[m][dkeys] = a[dkeys]
            };
        m = "utf8";
        p({
            utf8Decode: function(a) {
                return a
            }
        });
        m = "version";
        h.version = "2013.12.9";
        m = "suffixdict";
        var q = {
            
        };
        p({
            db: q
        });
        m = "autocorrect";
        q = {

        };
        p({
            db: q
        });
        m = "avrodict";
        p({
            tables: {

            }
        });
        m = "levenshtein";
        p({
            levenshtein: function(a, b) {
                var c, d, e, g = [];
                if (0 == a.length) return b.length;
                if (0 == b.length) return a.length;
                for (c = 0; c <= a.length; c++) g[c] = [], g[c][0] = c;
                for (d = 0; d <= b.length; d++) g[0][d] = d;
                for (c = 1; c <= a.length; c++)
                    for (d = 1; d <= b.length; d++) e = a.charAt(c - 1) == b.charAt(d - 1) ? 0 : 1, g[c][d] = Math.min(g[c - 1][d] + 1, g[c][d - 1] + 1, g[c - 1][d - 1] + e), 1 < c && 1 < d && a.charAt(c - 1) == b.charAt(d - 2) && a.charAt(c - 2) == b.charAt(d - 1) && (g[c][d] = Math.min(g[c][d], g[c - 2][d - 2] + e));
                return g[a.length][b.length]
            }
        });
        m = "avrolib";
        q = {
            Avro: {}
        };
        q.Avro.Phonetic = {
            parse: function(a) {
                a = this.fixString(a);
                for (var b = "", c = 0; c < a.length; ++c) {
                    for (var d = c, e = c + 1, g = d - 1, n = !1, g = 0; g < this.data.patterns.length; ++g) {
                        var k = this.data.patterns[g],
                            e = c + k.find.length;
                        if (e <= a.length && a.substring(d, e) == k.find) {
                            g = d - 1;
                            if ("undefined" !== typeof k.rules)
                                for (var h = 0; h < k.rules.length; ++h) {
                                    for (var r = k.rules[h], s = !0, l = 0, m = 0; m < r.matches.length; ++m) {
                                        var f = r.matches[m],
                                            l = "suffix" === f.type ? e : g;
                                        "undefined" === typeof f.negative && (f.negative = !1, "!" === f.scope.charAt(0) &&
                                            (f.negative = !0, f.scope = f.scope.substring(1)));
                                        "undefined" === typeof f.value && (f.value = "");
                                        if ("punctuation" === f.scope) {
                                            if (!(0 > l && "prefix" === f.type || l >= a.length && "suffix" === f.type || this.isPunctuation(a.charAt(l))) ^ f.negative) {
                                                s = !1;
                                                break
                                            }
                                        } else if ("vowel" === f.scope) {
                                            if (!((0 <= l && "prefix" === f.type || l < a.length && "suffix" === f.type) && this.isVowel(a.charAt(l))) ^ f.negative) {
                                                s = !1;
                                                break
                                            }
                                        } else if ("consonant" === f.scope) {
                                            if (!((0 <= l && "prefix" === f.type || l < a.length && "suffix" === f.type) && this.isConsonant(a.charAt(l))) ^
                                                f.negative) {
                                                s = !1;
                                                break
                                            }
                                        } else if ("exact" === f.scope) {
                                            var p;
                                            "suffix" === f.type ? (l = e, p = e + f.value.length) : (l = d - f.value.length, p = d);
                                            if (!this.isExact(f.value, a, l, p, f.negative)) {
                                                s = !1;
                                                break
                                            }
                                        }
                                    }
                                    if (s) {
                                        b += r.replace;
                                        c = e - 1;
                                        n = !0;
                                        break
                                    }
                                }
                            if (!0 == n) break;
                            b += k.replace;
                            c = e - 1;
                            n = !0;
                            break
                        }
                    }
                    n || (b += a.charAt(c))
                }
                return b
            },
            fixString: function(a) {
                for (var b = "", c = 0; c < a.length; ++c) var d = a.charAt(c),
                    b = this.isCaseSensitive(d) ? b + d : b + d.toLowerCase();
                return b
            },
            isVowel: function(a) {
                return 0 <= this.data.vowel.indexOf(a.toLowerCase())
            },
            isConsonant: function(a) {
                return 0 <=
                    this.data.consonant.indexOf(a.toLowerCase())
            },
            isPunctuation: function(a) {
                return !(this.isVowel(a) || this.isConsonant(a))
            },
            isExact: function(a, b, c, d, e) {
                return (0 <= c && d < b.length && b.substring(c, d) === a) ^ e
            },
            isCaseSensitive: function(a) {
                return 0 <= this.data.casesensitive.indexOf(a.toLowerCase())
            },
            data: {
                patterns: [{
                    find: "bhl",
                    replace: "ভ্ল"
                }, {
                    find: "psh",
                    replace: "পশ"
                }, {
                    find: "bdh",
                    replace: "ব্ধ"
                }, {
                    find: "bj",
                    replace: "ব্জ"
                }, {
                    find: "bd",
                    replace: "ব্দ"
                }, {
                    find: "bb",
                    replace: "ব্ব"
                }, {
                    find: "bl",
                    replace: "ব্ল"
                }, {
                    find: "bh",
                    replace: "ভ"
                }, {
                    find: "vl",
                    replace: "ভ্ল"
                }, {
                    find: "b",
                    replace: "ব"
                }, {
                    find: "v",
                    replace: "ভ"
                }, {
                    find: "cNG",
                    replace: "চ্ঞ"
                }, {
                    find: "cch",
                    replace: "চ্ছ"
                }, {
                    find: "cc",
                    replace: "চ্চ"
                }, {
                    find: "ch",
                    replace: "ছ"
                }, {
                    find: "c",
                    replace: "চ"
                }, {
                    find: "dhn",
                    replace: "ধ্ন"
                }, {
                    find: "dhm",
                    replace: "ধ্ম"
                }, {
                    find: "dgh",
                    replace: "দ্ঘ"
                }, {
                    find: "ddh",
                    replace: "দ্ধ"
                }, {
                    find: "dbh",
                    replace: "দ্ভ"
                }, {
                    find: "dv",
                    replace: "দ্ভ"
                }, {
                    find: "dm",
                    replace: "দ্ম"
                }, {
                    find: "DD",
                    replace: "ড্ড"
                }, {
                    find: "Dh",
                    replace: "ঢ"
                }, {
                    find: "dh",
                    replace: "ধ"
                }, {
                    find: "dg",
                    replace: "দ্গ"
                }, {
                    find: "dd",
                    replace: "দ্দ"
                }, {
                    find: "D",
                    replace: "ড"
                }, {
                    find: "d",
                    replace: "দ"
                }, {
                    find: "...",
                    replace: "..."
                }, {
                    find: ".`",
                    replace: "."
                }, {
                    find: "..",
                    replace: "।।"
                }, {
                    find: ".",
                    replace: "।"
                }, {
                    find: "ghn",
                    replace: "ঘ্ন"
                }, {
                    find: "Ghn",
                    replace: "ঘ্ন"
                }, {
                    find: "gdh",
                    replace: "গ্ধ"
                }, {
                    find: "Gdh",
                    replace: "গ্ধ"
                }, {
                    find: "gN",
                    replace: "গ্ণ"
                }, {
                    find: "GN",
                    replace: "গ্ণ"
                }, {
                    find: "gn",
                    replace: "গ্ন"
                }, {
                    find: "Gn",
                    replace: "গ্ন"
                }, {
                    find: "gm",
                    replace: "গ্ম"
                }, {
                    find: "Gm",
                    replace: "গ্ম"
                }, {
                    find: "gl",
                    replace: "গ্ল"
                }, {
                    find: "Gl",
                    replace: "গ্ল"
                }, {
                    find: "gg",
                    replace: "জ্ঞ"
                }, {
                    find: "GG",
                    replace: "জ্ঞ"
                }, {
                    find: "Gg",
                    replace: "জ্ঞ"
                }, {
                    find: "gG",
                    replace: "জ্ঞ"
                }, {
                    find: "gh",
                    replace: "ঘ"
                }, {
                    find: "Gh",
                    replace: "ঘ"
                }, {
                    find: "g",
                    replace: "গ"
                }, {
                    find: "G",
                    replace: "গ"
                }, {
                    find: "hN",
                    replace: "হ্ণ"
                }, {
                    find: "hn",
                    replace: "হ্ন"
                }, {
                    find: "hm",
                    replace: "হ্ম"
                }, {
                    find: "hl",
                    replace: "হ্ল"
                }, {
                    find: "h",
                    replace: "হ"
                }, {
                    find: "jjh",
                    replace: "জ্ঝ"
                }, {
                    find: "jNG",
                    replace: "জ্ঞ"
                }, {
                    find: "jh",
                    replace: "ঝ"
                }, {
                    find: "jj",
                    replace: "জ্জ"
                }, {
                    find: "j",
                    replace: "জ"
                }, {
                    find: "J",
                    replace: "জ"
                }, {
                    find: "kkhN",
                    replace: "ক্ষ্ণ"
                }, {
                    find: "kShN",
                    replace: "ক্ষ্ণ"
                }, {
                    find: "kkhm",
                    replace: "ক্ষ্ম"
                }, {
                    find: "kShm",
                    replace: "ক্ষ্ম"
                }, {
                    find: "kxN",
                    replace: "ক্ষ্ণ"
                }, {
                    find: "kxm",
                    replace: "ক্ষ্ম"
                }, {
                    find: "kkh",
                    replace: "ক্ষ"
                }, {
                    find: "kSh",
                    replace: "ক্ষ"
                }, {
                    find: "ksh",
                    replace: "কশ"
                }, {
                    find: "kx",
                    replace: "ক্ষ"
                }, {
                    find: "kk",
                    replace: "ক্ক"
                }, {
                    find: "kT",
                    replace: "ক্ট"
                }, {
                    find: "kt",
                    replace: "ক্ত"
                }, {
                    find: "kl",
                    replace: "ক্ল"
                }, {
                    find: "ks",
                    replace: "ক্স"
                }, {
                    find: "kh",
                    replace: "খ"
                }, {
                    find: "k",
                    replace: "ক"
                }, {
                    find: "lbh",
                    replace: "ল্ভ"
                }, {
                    find: "ldh",
                    replace: "ল্ধ"
                }, {
                    find: "lkh",
                    replace: "লখ"
                }, {
                    find: "lgh",
                    replace: "লঘ"
                }, {
                    find: "lph",
                    replace: "লফ"
                }, {
                    find: "lk",
                    replace: "ল্ক"
                }, {
                    find: "lg",
                    replace: "ল্গ"
                }, {
                    find: "lT",
                    replace: "ল্ট"
                }, {
                    find: "lD",
                    replace: "ল্ড"
                }, {
                    find: "lp",
                    replace: "ল্প"
                }, {
                    find: "lv",
                    replace: "ল্ভ"
                }, {
                    find: "lm",
                    replace: "ল্ম"
                }, {
                    find: "ll",
                    replace: "ল্ল"
                }, {
                    find: "lb",
                    replace: "ল্ব"
                }, {
                    find: "l",
                    replace: "ল"
                }, {
                    find: "mth",
                    replace: "ম্থ"
                }, {
                    find: "mph",
                    replace: "ম্ফ"
                }, {
                    find: "mbh",
                    replace: "ম্ভ"
                }, {
                    find: "mpl",
                    replace: "মপ্ল"
                }, {
                    find: "mn",
                    replace: "ম্ন"
                }, {
                    find: "mp",
                    replace: "ম্প"
                }, {
                    find: "mv",
                    replace: "ম্ভ"
                }, {
                    find: "mm",
                    replace: "ম্ম"
                }, {
                    find: "ml",
                    replace: "ম্ল"
                }, {
                    find: "mb",
                    replace: "ম্ব"
                }, {
                    find: "mf",
                    replace: "ম্ফ"
                }, {
                    find: "m",
                    replace: "ম"
                }, {
                    find: "0",
                    replace: "০"
                }, {
                    find: "1",
                    replace: "১"
                }, {
                    find: "2",
                    replace: "২"
                }, {
                    find: "3",
                    replace: "৩"
                }, {
                    find: "4",
                    replace: "৪"
                }, {
                    find: "5",
                    replace: "৫"
                }, {
                    find: "6",
                    replace: "৬"
                }, {
                    find: "7",
                    replace: "৭"
                }, {
                    find: "8",
                    replace: "৮"
                }, {
                    find: "9",
                    replace: "৯"
                }, {
                    find: "NgkSh",
                    replace: "ঙ্ক্ষ"
                }, {
                    find: "Ngkkh",
                    replace: "ঙ্ক্ষ"
                }, {
                    find: "NGch",
                    replace: "ঞ্ছ"
                }, {
                    find: "Nggh",
                    replace: "ঙ্ঘ"
                }, {
                    find: "Ngkh",
                    replace: "ঙ্খ"
                }, {
                    find: "NGjh",
                    replace: "ঞ্ঝ"
                }, {
                    find: "ngOU",
                    replace: "ঙ্গৌ"
                }, {
                    find: "ngOI",
                    replace: "ঙ্গৈ"
                }, {
                    find: "Ngkx",
                    replace: "ঙ্ক্ষ"
                }, {
                    find: "NGc",
                    replace: "ঞ্চ"
                }, {
                    find: "nch",
                    replace: "ঞ্ছ"
                }, {
                    find: "njh",
                    replace: "ঞ্ঝ"
                }, {
                    find: "ngh",
                    replace: "ঙ্ঘ"
                }, {
                    find: "Ngk",
                    replace: "ঙ্ক"
                }, {
                    find: "Ngx",
                    replace: "ঙ্ষ"
                }, {
                    find: "Ngg",
                    replace: "ঙ্গ"
                }, {
                    find: "Ngm",
                    replace: "ঙ্ম"
                }, {
                    find: "NGj",
                    replace: "ঞ্জ"
                }, {
                    find: "ndh",
                    replace: "ন্ধ"
                }, {
                    find: "nTh",
                    replace: "ন্ঠ"
                }, {
                    find: "NTh",
                    replace: "ণ্ঠ"
                }, {
                    find: "nth",
                    replace: "ন্থ"
                }, {
                    find: "nkh",
                    replace: "ঙ্খ"
                }, {
                    find: "ngo",
                    replace: "ঙ্গ"
                }, {
                    find: "nga",
                    replace: "ঙ্গা"
                }, {
                    find: "ngi",
                    replace: "ঙ্গি"
                }, {
                    find: "ngI",
                    replace: "ঙ্গী"
                }, {
                    find: "ngu",
                    replace: "ঙ্গু"
                }, {
                    find: "ngU",
                    replace: "ঙ্গূ"
                }, {
                    find: "nge",
                    replace: "ঙ্গে"
                }, {
                    find: "ngO",
                    replace: "ঙ্গো"
                }, {
                    find: "NDh",
                    replace: "ণ্ঢ"
                }, {
                    find: "nsh",
                    replace: "নশ"
                }, {
                    find: "Ngr",
                    replace: "ঙর"
                }, {
                    find: "NGr",
                    replace: "ঞর"
                }, {
                    find: "ngr",
                    replace: "ংর"
                }, {
                    find: "nj",
                    replace: "ঞ্জ"
                }, {
                    find: "Ng",
                    replace: "ঙ"
                }, {
                    find: "NG",
                    replace: "ঞ"
                }, {
                    find: "nk",
                    replace: "ঙ্ক"
                }, {
                    find: "ng",
                    replace: "ং"
                }, {
                    find: "nn",
                    replace: "ন্ন"
                }, {
                    find: "NN",
                    replace: "ণ্ণ"
                }, {
                    find: "Nn",
                    replace: "ণ্ন"
                }, {
                    find: "nm",
                    replace: "ন্ম"
                }, {
                    find: "Nm",
                    replace: "ণ্ম"
                }, {
                    find: "nd",
                    replace: "ন্দ"
                }, {
                    find: "nT",
                    replace: "ন্ট"
                }, {
                    find: "NT",
                    replace: "ণ্ট"
                }, {
                    find: "nD",
                    replace: "ন্ড"
                }, {
                    find: "ND",
                    replace: "ণ্ড"
                }, {
                    find: "nt",
                    replace: "ন্ত"
                }, {
                    find: "ns",
                    replace: "ন্স"
                }, {
                    find: "nc",
                    replace: "ঞ্চ"
                }, {
                    find: "n",
                    replace: "ন"
                }, {
                    find: "N",
                    replace: "ণ"
                }, {
                    find: "OI`",
                    replace: "ৈ"
                }, {
                    find: "OU`",
                    replace: "ৌ"
                }, {
                    find: "O`",
                    replace: "ো"
                }, {
                    find: "OI",
                    replace: "ৈ",
                    rules: [{
                        matches: [{
                            type: "prefix",
                            scope: "!consonant"
                        }],
                        replace: "ঐ"
                    }, {
                        matches: [{
                            type: "prefix",
                            scope: "punctuation"
                        }],
                        replace: "ঐ"
                    }]
                }, {
                    find: "OU",
                    replace: "ৌ",
                    rules: [{
                        matches: [{
                            type: "prefix",
                            scope: "!consonant"
                        }],
                        replace: "ঔ"
                    }, {
                        matches: [{
                            type: "prefix",
                            scope: "punctuation"
                        }],
                        replace: "ঔ"
                    }]
                }, {
                    find: "O",
                    replace: "ো",
                    rules: [{
                        matches: [{
                            type: "prefix",
                            scope: "!consonant"
                        }],
                        replace: "ও"
                    }, {
                        matches: [{
                            type: "prefix",
                            scope: "punctuation"
                        }],
                        replace: "ও"
                    }]
                }, {
                    find: "phl",
                    replace: "ফ্ল"
                }, {
                    find: "pT",
                    replace: "প্ট"
                }, {
                    find: "pt",
                    replace: "প্ত"
                }, {
                    find: "pn",
                    replace: "প্ন"
                }, {
                    find: "pp",
                    replace: "প্প"
                }, {
                    find: "pl",
                    replace: "প্ল"
                }, {
                    find: "ps",
                    replace: "প্স"
                }, {
                    find: "ph",
                    replace: "ফ"
                }, {
                    find: "fl",
                    replace: "ফ্ল"
                }, {
                    find: "f",
                    replace: "ফ"
                }, {
                    find: "p",
                    replace: "প"
                }, {
                    find: "rri`",
                    replace: "ৃ"
                }, {
                    find: "rri",
                    replace: "ৃ",
                    rules: [{
                        matches: [{
                            type: "prefix",
                            scope: "!consonant"
                        }],
                        replace: "ঋ"
                    }, {
                        matches: [{
                            type: "prefix",
                            scope: "punctuation"
                        }],
                        replace: "ঋ"
                    }]
                }, {
                    find: "rrZ",
                    replace: "রর‍্য"
                }, {
                    find: "rry",
                    replace: "রর‍্য"
                }, {
                    find: "rZ",
                    replace: "র‍্য",
                    rules: [{
                        matches: [{
                            type: "prefix",
                            scope: "consonant"
                        }, {
                            type: "prefix",
                            scope: "!exact",
                            value: "r"
                        }, {
                            type: "prefix",
                            scope: "!exact",
                            value: "y"
                        }, {
                            type: "prefix",
                            scope: "!exact",
                            value: "w"
                        }, {
                            type: "prefix",
                            scope: "!exact",
                            value: "x"
                        }],
                        replace: "্র্য"
                    }]
                }, {
                    find: "ry",
                    replace: "র‍্য",
                    rules: [{
                        matches: [{
                            type: "prefix",
                            scope: "consonant"
                        }, {
                            type: "prefix",
                            scope: "!exact",
                            value: "r"
                        }, {
                            type: "prefix",
                            scope: "!exact",
                            value: "y"
                        }, {
                            type: "prefix",
                            scope: "!exact",
                            value: "w"
                        }, {
                            type: "prefix",
                            scope: "!exact",
                            value: "x"
                        }],
                        replace: "্র্য"
                    }]
                }, {
                    find: "rr",
                    replace: "রর",
                    rules: [{
                        matches: [{
                            type: "prefix",
                            scope: "!consonant"
                        }, {
                            type: "suffix",
                            scope: "!vowel"
                        }, {
                            type: "suffix",
                            scope: "!exact",
                            value: "r"
                        }, {
                            type: "suffix",
                            scope: "!punctuation"
                        }],
                        replace: "র্"
                    }, {
                        matches: [{
                            type: "prefix",
                            scope: "consonant"
                        }, {
                            type: "prefix",
                            scope: "!exact",
                            value: "r"
                        }],
                        replace: "্রর"
                    }]
                }, {
                    find: "Rg",
                    replace: "ড়্গ"
                }, {
                    find: "Rh",
                    replace: "ঢ়"
                }, {
                    find: "R",
                    replace: "ড়"
                }, {
                    find: "r",
                    replace: "র",
                    rules: [{
                        matches: [{
                            type: "prefix",
                            scope: "consonant"
                        }, {
                            type: "prefix",
                            scope: "!exact",
                            value: "r"
                        }, {
                            type: "prefix",
                            scope: "!exact",
                            value: "y"
                        }, {
                            type: "prefix",
                            scope: "!exact",
                            value: "w"
                        }, {
                            type: "prefix",
                            scope: "!exact",
                            value: "x"
                        }, {
                            type: "prefix",
                            scope: "!exact",
                            value: "Z"
                        }],
                        replace: "্র"
                    }]
                }, {
                    find: "shch",
                    replace: "শ্ছ"
                }, {
                    find: "ShTh",
                    replace: "ষ্ঠ"
                }, {
                    find: "Shph",
                    replace: "ষ্ফ"
                }, {
                    find: "Sch",
                    replace: "শ্ছ"
                }, {
                    find: "skl",
                    replace: "স্ক্ল"
                }, {
                    find: "skh",
                    replace: "স্খ"
                }, {
                    find: "sth",
                    replace: "স্থ"
                }, {
                    find: "sph",
                    replace: "স্ফ"
                }, {
                    find: "shc",
                    replace: "শ্চ"
                }, {
                    find: "sht",
                    replace: "শ্ত"
                }, {
                    find: "shn",
                    replace: "শ্ন"
                }, {
                    find: "shm",
                    replace: "শ্ম"
                }, {
                    find: "shl",
                    replace: "শ্ল"
                }, {
                    find: "Shk",
                    replace: "ষ্ক"
                }, {
                    find: "ShT",
                    replace: "ষ্ট"
                }, {
                    find: "ShN",
                    replace: "ষ্ণ"
                }, {
                    find: "Shp",
                    replace: "ষ্প"
                }, {
                    find: "Shf",
                    replace: "ষ্ফ"
                }, {
                    find: "Shm",
                    replace: "ষ্ম"
                }, {
                    find: "spl",
                    replace: "স্প্ল"
                }, {
                    find: "sk",
                    replace: "স্ক"
                }, {
                    find: "Sc",
                    replace: "শ্চ"
                }, {
                    find: "sT",
                    replace: "স্ট"
                }, {
                    find: "st",
                    replace: "স্ত"
                }, {
                    find: "sn",
                    replace: "স্ন"
                }, {
                    find: "sp",
                    replace: "স্প"
                }, {
                    find: "sf",
                    replace: "স্ফ"
                }, {
                    find: "sm",
                    replace: "স্ম"
                }, {
                    find: "sl",
                    replace: "স্ল"
                }, {
                    find: "sh",
                    replace: "শ"
                }, {
                    find: "Sc",
                    replace: "শ্চ"
                }, {
                    find: "St",
                    replace: "শ্ত"
                }, {
                    find: "Sn",
                    replace: "শ্ন"
                }, {
                    find: "Sm",
                    replace: "শ্ম"
                }, {
                    find: "Sl",
                    replace: "শ্ল"
                }, {
                    find: "Sh",
                    replace: "ষ"
                }, {
                    find: "s",
                    replace: "স"
                }, {
                    find: "S",
                    replace: "শ"
                }, {
                    find: "oo`",
                    replace: "ু"
                }, {
                    find: "oo",
                    replace: "ু",
                    rules: [{
                        matches: [{
                            type: "prefix",
                            scope: "!consonant"
                        }, {
                            type: "suffix",
                            scope: "!exact",
                            value: "`"
                        }],
                        replace: "উ"
                    }, {
                        matches: [{
                            type: "prefix",
                            scope: "punctuation"
                        }, {
                            type: "suffix",
                            scope: "!exact",
                            value: "`"
                        }],
                        replace: "উ"
                    }]
                }, {
                    find: "o`",
                    replace: ""
                }, {
                    find: "oZ",
                    replace: "অ্য"
                }, {
                    find: "o",
                    replace: "",
                    rules: [{
                        matches: [{
                            type: "prefix",
                            scope: "vowel"
                        }, {
                            type: "prefix",
                            scope: "!exact",
                            value: "o"
                        }],
                        replace: "ও"
                    }, {
                        matches: [{
                            type: "prefix",
                            scope: "vowel"
                        }, {
                            type: "prefix",
                            scope: "exact",
                            value: "o"
                        }],
                        replace: "অ"
                    }, {
                        matches: [{
                            type: "prefix",
                            scope: "punctuation"
                        }],
                        replace: "অ"
                    }]
                }, {
                    find: "tth",
                    replace: "ত্থ"
                }, {
                    find: "t``",
                    replace: "ৎ"
                }, {
                    find: "TT",
                    replace: "ট্ট"
                }, {
                    find: "Tm",
                    replace: "ট্ম"
                }, {
                    find: "Th",
                    replace: "ঠ"
                }, {
                    find: "tn",
                    replace: "ত্ন"
                }, {
                    find: "tm",
                    replace: "ত্ম"
                }, {
                    find: "th",
                    replace: "থ"
                }, {
                    find: "tt",
                    replace: "ত্ত"
                }, {
                    find: "T",
                    replace: "ট"
                }, {
                    find: "t",
                    replace: "ত"
                }, {
                    find: "aZ",
                    replace: "অ্যা"
                }, {
                    find: "AZ",
                    replace: "অ্যা"
                }, {
                    find: "a`",
                    replace: "া"
                }, {
                    find: "A`",
                    replace: "া"
                }, {
                    find: "a",
                    replace: "া",
                    rules: [{
                        matches: [{
                            type: "prefix",
                            scope: "punctuation"
                        }, {
                            type: "suffix",
                            scope: "!exact",
                            value: "`"
                        }],
                        replace: "আ"
                    }, {
                        matches: [{
                            type: "prefix",
                            scope: "!consonant"
                        }, {
                            type: "prefix",
                            scope: "!exact",
                            value: "a"
                        }, {
                            type: "suffix",
                            scope: "!exact",
                            value: "`"
                        }],
                        replace: "য়া"
                    }, {
                        matches: [{
                            type: "prefix",
                            scope: "exact",
                            value: "a"
                        }, {
                            type: "suffix",
                            scope: "!exact",
                            value: "`"
                        }],
                        replace: "আ"
                    }]
                }, {
                    find: "i`",
                    replace: "ি"
                }, {
                    find: "i",
                    replace: "ি",
                    rules: [{
                        matches: [{
                            type: "prefix",
                            scope: "!consonant"
                        }, {
                            type: "suffix",
                            scope: "!exact",
                            value: "`"
                        }],
                        replace: "ই"
                    }, {
                        matches: [{
                            type: "prefix",
                            scope: "punctuation"
                        }, {
                            type: "suffix",
                            scope: "!exact",
                            value: "`"
                        }],
                        replace: "ই"
                    }]
                }, {
                    find: "I`",
                    replace: "ী"
                }, {
                    find: "I",
                    replace: "ী",
                    rules: [{
                        matches: [{
                            type: "prefix",
                            scope: "!consonant"
                        }, {
                            type: "suffix",
                            scope: "!exact",
                            value: "`"
                        }],
                        replace: "ঈ"
                    }, {
                        matches: [{
                            type: "prefix",
                            scope: "punctuation"
                        }, {
                            type: "suffix",
                            scope: "!exact",
                            value: "`"
                        }],
                        replace: "ঈ"
                    }]
                }, {
                    find: "u`",
                    replace: "ু"
                }, {
                    find: "u",
                    replace: "ু",
                    rules: [{
                        matches: [{
                            type: "prefix",
                            scope: "!consonant"
                        }, {
                            type: "suffix",
                            scope: "!exact",
                            value: "`"
                        }],
                        replace: "উ"
                    }, {
                        matches: [{
                            type: "prefix",
                            scope: "punctuation"
                        }, {
                            type: "suffix",
                            scope: "!exact",
                            value: "`"
                        }],
                        replace: "উ"
                    }]
                }, {
                    find: "U`",
                    replace: "ূ"
                }, {
                    find: "U",
                    replace: "ূ",
                    rules: [{
                        matches: [{
                            type: "prefix",
                            scope: "!consonant"
                        }, {
                            type: "suffix",
                            scope: "!exact",
                            value: "`"
                        }],
                        replace: "ঊ"
                    }, {
                        matches: [{
                            type: "prefix",
                            scope: "punctuation"
                        }, {
                            type: "suffix",
                            scope: "!exact",
                            value: "`"
                        }],
                        replace: "ঊ"
                    }]
                }, {
                    find: "ee`",
                    replace: "ী"
                }, {
                    find: "ee",
                    replace: "ী",
                    rules: [{
                        matches: [{
                            type: "prefix",
                            scope: "!consonant"
                        }, {
                            type: "suffix",
                            scope: "!exact",
                            value: "`"
                        }],
                        replace: "ঈ"
                    }, {
                        matches: [{
                            type: "prefix",
                            scope: "punctuation"
                        }, {
                            type: "suffix",
                            scope: "!exact",
                            value: "`"
                        }],
                        replace: "ঈ"
                    }]
                }, {
                    find: "e`",
                    replace: "ে"
                }, {
                    find: "e",
                    replace: "ে",
                    rules: [{
                        matches: [{
                            type: "prefix",
                            scope: "!consonant"
                        }, {
                            type: "suffix",
                            scope: "!exact",
                            value: "`"
                        }],
                        replace: "এ"
                    }, {
                        matches: [{
                            type: "prefix",
                            scope: "punctuation"
                        }, {
                            type: "suffix",
                            scope: "!exact",
                            value: "`"
                        }],
                        replace: "এ"
                    }]
                }, {
                    find: "z",
                    replace: "য"
                }, {
                    find: "Z",
                    replace: "্য"
                }, {
                    find: "y",
                    replace: "্য",
                    rules: [{
                        matches: [{
                            type: "prefix",
                            scope: "!consonant"
                        }, {
                            type: "prefix",
                            scope: "!punctuation"
                        }],
                        replace: "য়"
                    }, {
                        matches: [{
                            type: "prefix",
                            scope: "punctuation"
                        }],
                        replace: "ইয়"
                    }]
                }, {
                    find: "Y",
                    replace: "য়"
                }, {
                    find: "q",
                    replace: "ক"
                }, {
                    find: "w",
                    replace: "ও",
                    rules: [{
                        matches: [{
                            type: "prefix",
                            scope: "punctuation"
                        }, {
                            type: "suffix",
                            scope: "vowel"
                        }],
                        replace: "ওয়"
                    }, {
                        matches: [{
                            type: "prefix",
                            scope: "consonant"
                        }],
                        replace: "্ব"
                    }]
                }, {
                    find: "x",
                    replace: "ক্স",
                    rules: [{
                        matches: [{
                            type: "prefix",
                            scope: "punctuation"
                        }],
                        replace: "এক্স"
                    }]
                }, {
                    find: ":`",
                    replace: ":"
                }, {
                    find: ":",
                    replace: "ঃ"
                }, {
                    find: "^`",
                    replace: "^"
                }, {
                    find: "^",
                    replace: "ঁ"
                }, {
                    find: ",,",
                    replace: "্‌"
                }, {
                    find: ",",
                    replace: ","
                }, {
                    find: "$",
                    replace: "৳"
                }, {
                    find: "`",
                    replace: ""
                }],
                vowel: "aeiou",
                consonant: "bcdfghjklmnpqrstvwxyz",
                casesensitive: "oiudgjnrstyz"
            }
        };
        p({
            OmicronLab: q
        });
        m = "avroregexlib";
        var C = h.utf8;
        z.prototype = {
            parse: function(a) {
                a = this._fixString(a);
                for (var b = "", c = 0; c < a.length; ++c) {
                    for (var d = c, e = c + 1, g = d - 1, n = !1, g = 0; g < this.data.patterns.length; ++g) {
                        var k = this.data.patterns[g],
                            e = c + k.find.length;
                        if (e <= a.length && a.substring(d, e) == k.find) {
                            g = d - 1;
                            if ("undefined" !== typeof k.rules)
                                for (var h = 0; h < k.rules.length; ++h) {
                                    for (var r = k.rules[h], m = !0, l = 0, p = 0; p < r.matches.length; ++p) {
                                        var f =
                                            r.matches[p],
                                            l = "suffix" === f.type ? e : g;
                                        "undefined" === typeof f.negative && (f.negative = !1, "!" === f.scope.charAt(0) && (f.negative = !0, f.scope = f.scope.substring(1)));
                                        "undefined" === typeof f.value && (f.value = "");
                                        if ("punctuation" === f.scope) {
                                            if (!(0 > l && "prefix" === f.type || l >= a.length && "suffix" === f.type || this._isPunctuation(a.charAt(l))) ^ f.negative) {
                                                m = !1;
                                                break
                                            }
                                        } else if ("vowel" === f.scope) {
                                            if (!((0 <= l && "prefix" === f.type || l < a.length && "suffix" === f.type) && this._isVowel(a.charAt(l))) ^ f.negative) {
                                                m = !1;
                                                break
                                            }
                                        } else if ("consonant" ===
                                            f.scope) {
                                            if (!((0 <= l && "prefix" === f.type || l < a.length && "suffix" === f.type) && this._isConsonant(a.charAt(l))) ^ f.negative) {
                                                m = !1;
                                                break
                                            }
                                        } else if ("exact" === f.scope) {
                                            var q;
                                            "suffix" === f.type ? (l = e, q = e + f.value.length) : (l = d - f.value.length, q = d);
                                            if (!this._isExact(f.value, a, l, q, f.negative)) {
                                                m = !1;
                                                break
                                            }
                                        }
                                    }
                                    if (m) {
                                        b += r.replace + "(্[যবম])?(্?)([ঃঁ]?)";
                                        c = e - 1;
                                        n = !0;
                                        break
                                    }
                                }
                            if (!0 == n) break;
                            b += k.replace + "(্[যবম])?(্?)([ঃঁ]?)";
                            c = e - 1;
                            n = !0;
                            break
                        }
                    }
                    n || (b += a.charAt(c))
                }
                return b
            },
            _convertToUnicodeValue: function(a) {
                var b = "";
                a = C.utf8Decode(a);
                for (var c = 0; c < a.length; c++) {
                    var d = a.charCodeAt(c);
                    if (255 <= d) {
                        for (var d = d.toString(16), e = 4 - d.length, g = ""; 0 < e; e--) g += "0";
                        b += "\\u" + g + d
                    } else b += a.charAt(c)
                }
                return b
            },
            _fixString: function(a) {
                for (var b = "", c = 0; c < a.length; ++c) {
                    var d = a.charAt(c);
                    this._isIgnore(d) || (b += d.toLowerCase())
                }
                return b
            },
            _isVowel: function(a) {
                return 0 <= this.data.vowel.indexOf(a.toLowerCase())
            },
            _isConsonant: function(a) {
                return 0 <= this.data.consonant.indexOf(a.toLowerCase())
            },
            _isPunctuation: function(a) {
                return !(this._isVowel(a) || this._isConsonant(a))
            },
            _isExact: function(a, b, c, d, e) {
                return (0 <= c && d < b.length && b.substring(c, d) === a) ^ e
            },
            _isIgnore: function(a) {
                return 0 <= this.data.ignore.indexOf(a.toLowerCase())
            },
            data: {
                patterns: [{
                    find: "aa",
                    replace: "(আ|(য়া)|া|((([অএ]্যা?)|[আএ]|([‌‍]?(্য)?া)|(য়া))((([অএ]্যা?)|[আএ]|([‌‍]?(্য)?া)|(য়া)))?))",
                    rules: []
                }, {
                    find: "au",
                    replace: "(ঔ|ৌ(([অএ]্যা?)|[আএ]|([‌‍]?(্য)?া)|(য়া))([উঊুূ]|(য়[ুূ])))",
                    rules: []
                }, {
                    find: "az",
                    replace: "((([অএ]্যা?)|[আএ]|([‌‍]?(্য)?া)|(য়া))((জ|য|(জ়)|([‌‍]?্য)))?)",
                    rules: []
                }, {
                    find: "ai",
                    replace: "(ঐ|ৈ|(([অএ]্যা?)|[আএ]|([‌‍]?(্য)?া)|(য়া))([ইঈিী]|(য়[িী])))",
                    rules: []
                }, {
                    find: "a",
                    replace: "(([অএ]্যা?)|[আএ]|([‌‍]?(্য)?া)|(য়া))",
                    rules: []
                }, {
                    find: "bbh",
                    replace: "((ব?্?(ভ|(ব্?(হ|ঃ|(হ্‌?)))))|((ব্?ব?)্?(হ|ঃ|(হ্‌?)))|(ব্?ব্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "bdh",
                    replace: "((ব্?(ধ|ঢ|([দড]্?(হ|ঃ|(হ্‌?)))))|((ব্?[দড])্?(হ|ঃ|(হ্‌?)))|(ব্?[দড]্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "bhl",
                    replace: "(((ভ|(ব্?(হ|ঃ|(হ্‌?))))্?ল)|(ব্?((হ|ঃ|(হ্‌?))্?ল))|(ব্?(হ|ঃ|(হ্‌?))্?ল))",
                    rules: []
                }, {
                    find: "bh",
                    replace: "(ভ|(ব্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "bb",
                    replace: "(ব্?ব?)",
                    rules: []
                }, {
                    find: "bd",
                    replace: "(ব্?[দড])",
                    rules: []
                }, {
                    find: "bv",
                    replace: "(ব?্?ভ)",
                    rules: []
                }, {
                    find: "b",
                    replace: "ব",
                    rules: []
                }, {
                    find: "chchh",
                    replace: "((চ্ছ)|((চ|ছ|([চছ]্?(হ|ঃ|(হ্‌?))))্?(((চ|ছ|([চছ]্?(হ|ঃ|(হ্‌?))))্?((হ|ঃ|(হ্‌?)))?)|([চছ]্?((হ|ঃ|(হ্‌?))্?(হ|ঃ|(হ্‌?))))|([চছ]্?(হ|ঃ|(হ্‌?))্?(হ|ঃ|(হ্‌?)))))|((চ|ছ|([চছ]্?(হ|ঃ|(হ্‌?))))্?(চ|ছ|([চছ]্?(হ|ঃ|(হ্‌?))))্?(হ|ঃ|(হ্‌?)))|([চছ]্?(হ|ঃ|(হ্‌?))্?[চছ]্?(হ|ঃ|(হ্‌?))্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "cch",
                    replace: "(([চছ]্?(চ|ছ|([চছ]্?(হ|ঃ|(হ্‌?)))))|([চছ]্?[চছ]্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "chh",
                    replace: "(((চ|ছ|([চছ]্?(হ|ঃ|(হ্‌?))))্?((হ|ঃ|(হ্‌?)))?)|([চছ]্?((হ|ঃ|(হ্‌?))্?(হ|ঃ|(হ্‌?))))|([চছ]্?(হ|ঃ|(হ্‌?))্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "cng",
                    replace: "((চ্ঞ)|([চছ]্?(ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ)))))|([চছ]্?[নণঁঙঞং]্?(গ|(জ্ঞ)))|(([চছ]্?[নণঁঙঞং])্?(গ|(জ্ঞ))))",
                    rules: []
                }, {
                    find: "ch",
                    replace: "(চ|ছ|([চছ]্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "ck",
                    replace: "(ক|([চছ]্?ক))",
                    rules: []
                }, {
                    find: "cc",
                    replace: "([চছ]্?[চছ]?)",
                    rules: []
                }, {
                    find: "cn",
                    replace: "([চছ]্?[নণঁঙঞং])",
                    rules: []
                }, {
                    find: "c",
                    replace: "([চছ])",
                    rules: []
                }, {
                    find: "dhm",
                    replace: "(((ধ|ঢ|([দড]্?(হ|ঃ|(হ্‌?))))্?ম)|([দড]্?((হ|ঃ|(হ্‌?))্?ম))|([দড]্?(হ|ঃ|(হ্‌?))্?ম))",
                    rules: []
                }, {
                    find: "dhn",
                    replace: "(((ধ|ঢ|([দড]্?(হ|ঃ|(হ্‌?))))্?[নণঁঙঞং])|([দড]্?((হ|ঃ|(হ্‌?))্?[নণঁঙঞং]))|([দড]্?(হ|ঃ|(হ্‌?))্?[নণঁঙঞং]))",
                    rules: []
                }, {
                    find: "dbh",
                    replace: "(([দড]্?(ভ|(ব্?(হ|ঃ|(হ্‌?)))))|(([দড]্?ব)্?(হ|ঃ|(হ্‌?)))|([দড]্?ব্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "ddh",
                    replace: "(([দড]?্?(ধ|ঢ|([দড]্?(হ|ঃ|(হ্‌?)))))|(([দড]্?[দড]?)্?(হ|ঃ|(হ্‌?)))|([দড]্?[দড]্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "dgh",
                    replace: "(([দড]্?(ঘ|((গ|(জ্ঞ))্?(হ|ঃ|(হ্‌?)))))|(([দড]্?(গ|(জ্ঞ)))্?(হ|ঃ|(হ্‌?)))|([দড]্?(গ|(জ্ঞ))্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "db",
                    replace: "([দড]্?ব)",
                    rules: []
                }, {
                    find: "dd",
                    replace: "([দড]্?[দড]?)",
                    rules: []
                }, {
                    find: "dg",
                    replace: "([দড]্?(গ|(জ্ঞ)))",
                    rules: []
                }, {
                    find: "dh",
                    replace: "(ধ|ঢ|([দড]্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "d",
                    replace: "([দড])",
                    rules: []
                }, {
                    find: "ey",
                    replace: "(এ|ই|ে|(েই)|(এই)|ঈ|ী|(((এ্যা?)|[এে]|([‌‍]?(্য)া)|(য়ে))(য়|(ইয়)|([‌‍]?্য))))",
                    rules: []
                }, {
                    find: "ee",
                    replace: "(ই|ঈ|ি|ী|(য়েই)|(((এ্যা?)|[এে]|([‌‍]?(্য)া)|(য়ে))((এ্যা?)|[এে]|([‌‍]?(্য)া)|(য়ে))))",
                    rules: []
                }, {
                    find: "e",
                    replace: "((এ্যা?)|[এে]|([‌‍]?(্য)া)|(য়ে))",
                    rules: []
                }, {
                    find: "ff",
                    replace: "(ফ্?ফ?)",
                    rules: []
                }, {
                    find: "f",
                    replace: "ফ",
                    rules: []
                }, {
                    find: "ggh",
                    replace: "((((জ্ঞ)|((গ|(জ্ঞ))্?((গ|(জ্ঞ)))?))্?(হ|ঃ|(হ্‌?)))|((গ|(জ্ঞ))্?(ঘ|((গ|(জ্ঞ))্?(হ|ঃ|(হ্‌?)))))|((গ|(জ্ঞ))্?(গ|(জ্ঞ))্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "gdh",
                    replace: "(((গ|(জ্ঞ))্?(ধ|ঢ|([দড]্?(হ|ঃ|(হ্‌?)))))|((গ|(জ্ঞ))্?[দড]্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "ghn",
                    replace: "(((ঘ|((গ|(জ্ঞ))্?(হ|ঃ|(হ্‌?))))্?[নণঁঙঞং])|((গ|(জ্ঞ))্?((হ|ঃ|(হ্‌?))্?[নণঁঙঞং]))|((গ|(জ্ঞ))্?(হ|ঃ|(হ্‌?))্?[নণঁঙঞং]))",
                    rules: []
                }, {
                    find: "gh",
                    replace: "(ঘ|((গ|(জ্ঞ))্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "gg",
                    replace: "((জ্ঞ)|((গ|(জ্ঞ))্?((গ|(জ্ঞ)))?))",
                    rules: []
                }, {
                    find: "g",
                    replace: "(গ|(জ্ঞ))",
                    rules: []
                }, {
                    find: "hl",
                    replace: "((হ|ঃ|(হ্‌?))্?ল)",
                    rules: []
                }, {
                    find: "hh",
                    replace: "((হ|ঃ|(হ্‌?))্?(হ|ঃ|(হ্‌?)))",
                    rules: []
                }, {
                    find: "hm",
                    replace: "((হ|ঃ|(হ্‌?))্?ম)",
                    rules: []
                }, {
                    find: "hn",
                    replace: "((হ|ঃ|(হ্‌?))্?[নণঁঙঞং])",
                    rules: []
                }, {
                    find: "h",
                    replace: "(হ|ঃ|(হ্‌?))",
                    rules: []
                }, {
                    find: "ia",
                    replace: "((ঞা)|(([ইঈিী]|(য়[িী]))(([অএ]্যা?)|[আএ]|([‌‍]?(্য)?া)|(য়া))))",
                    rules: []
                }, {
                    find: "i",
                    replace: "([ইঈিী]|(য়[িী]))",
                    rules: []
                }, {
                    find: "jng",
                    replace: "((জ্ঞ)|(([জয]|(জ়))্?(ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ)))))|(([জয]|(জ়))্?[নণঁঙঞং]্?(গ|(জ্ঞ))))",
                    rules: []
                }, {
                    find: "jjh",
                    replace: "(((([জয]|(জ়)))?্?(ঝ|(([জয]|(জ়))্?(হ|ঃ|(হ্‌?)))))|(হ্য)|(((হ্য)|(([জয]|(জ়))্?(([জয]|(জ়)))?))্?(হ|ঃ|(হ্‌?)))|(([জয]|(জ়))্?([জয]|(জ়))্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "jj",
                    replace: "((হ্য)|(([জয]|(জ়))্?(([জয]|(জ়)))?))",
                    rules: []
                }, {
                    find: "jh",
                    replace: "(ঝ|(([জয]|(জ়))্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "j",
                    replace: "([জয]|(জ়))",
                    rules: []
                }, {
                    find: "kshm",
                    replace: "((((ক্?(স|শ|ষ|([সশষ]্?(হ|ঃ|(হ্‌?)))))|((ক্?[সশষ])্?(হ|ঃ|(হ্‌?)))|(ক্?[সশষ]্?(হ|ঃ|(হ্‌?))))্?ম)|(ক্?(((স|শ|ষ|([সশষ]্?(হ|ঃ|(হ্‌?))))্?ম)|([সশষ]্?((হ|ঃ|(হ্‌?))্?ম))|([সশষ]্?(হ|ঃ|(হ্‌?))্?ম)))|((ক্?[সশষ])্?((হ|ঃ|(হ্‌?))্?ম))|(ক্?(স|শ|ষ|([সশষ]্?(হ|ঃ|(হ্‌?))))্?ম)|(ক্?[সশষ]্?(হ|ঃ|(হ্‌?))্?ম))",
                    rules: []
                }, {
                    find: "kkhm",
                    replace: "((((ক্ষ)|((ক্?ক?)্?(হ|ঃ|(হ্‌?)))|(ক?্?(খ|(ক্ষ)|(ক্?(হ|ঃ|(হ্‌?)))))|(ক্?ক্?(হ|ঃ|(হ্‌?))))্?ম)|((ক্?ক?)্?((হ|ঃ|(হ্‌?))্?ম))|(ক্?ক্?(হ|ঃ|(হ্‌?))্?ম)|(ক্?(খ|(ক্ষ)|(ক্?(হ|ঃ|(হ্‌?))))্?ম))",
                    rules: []
                }, {
                    find: "kshn",
                    replace: "((((ক্?(স|শ|ষ|([সশষ]্?(হ|ঃ|(হ্‌?)))))|((ক্?[সশষ])্?(হ|ঃ|(হ্‌?)))|(ক্?[সশষ]্?(হ|ঃ|(হ্‌?))))্?[নণঁঙঞং])|(ক্?(((স|শ|ষ|([সশষ]্?(হ|ঃ|(হ্‌?))))্?[নণঁঙঞং])|([সশষ]্?((হ|ঃ|(হ্‌?))্?[নণঁঙঞং]))|([সশষ]্?(হ|ঃ|(হ্‌?))্?[নণঁঙঞং])))|((ক্?[সশষ])্?((হ|ঃ|(হ্‌?))্?[নণঁঙঞং]))|(ক্?(স|শ|ষ|([সশষ]্?(হ|ঃ|(হ্‌?))))্?[নণঁঙঞং])|(ক্?[সশষ]্?(হ|ঃ|(হ্‌?))্?[নণঁঙঞং]))",
                    rules: []
                }, {
                    find: "kkhn",
                    replace: "((((ক্ষ)|((ক্?ক?)্?(হ|ঃ|(হ্‌?)))|(ক?্?(খ|(ক্ষ)|(ক্?(হ|ঃ|(হ্‌?)))))|(ক্?ক্?(হ|ঃ|(হ্‌?))))্?[নণঁঙঞং])|((ক্?ক?)্?((হ|ঃ|(হ্‌?))্?[নণঁঙঞং]))|(ক্?ক্?(হ|ঃ|(হ্‌?))্?[নণঁঙঞং])|(ক্?(খ|(ক্ষ)|(ক্?(হ|ঃ|(হ্‌?))))্?[নণঁঙঞং]))",
                    rules: []
                }, {
                    find: "ksh",
                    replace: "((ক্?(স|শ|ষ|([সশষ]্?(হ|ঃ|(হ্‌?)))))|((ক্?[সশষ])্?(হ|ঃ|(হ্‌?)))|(ক্?[সশষ]্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "kkh",
                    replace: "((ক্ষ)|((ক্?ক?)্?(হ|ঃ|(হ্‌?)))|(ক?্?(খ|(ক্ষ)|(ক্?(হ|ঃ|(হ্‌?)))))|(ক্?ক্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "kxm",
                    replace: "((((ক্ষ)|(ক্?((ক্স)|ষ)))্?ম)|(ক্?(((ক্স)|ষ)্?ম))|(ক্?((ক্স)|ষ)্?ম))",
                    rules: []
                }, {
                    find: "kxn",
                    replace: "((((ক্ষ)|(ক্?((ক্স)|ষ)))্?[নণঁঙঞং])|(ক্?(((ক্স)|ষ)্?[নণঁঙঞং]))|(ক্?((ক্স)|ষ)্?[নণঁঙঞং]))",
                    rules: []
                }, {
                    find: "kh",
                    replace: "(খ|(ক্ষ)|(ক্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "kk",
                    replace: "(ক্?ক?)",
                    rules: []
                }, {
                    find: "ks",
                    replace: "(ক্?[সশষ])",
                    rules: []
                }, {
                    find: "kx",
                    replace: "((ক্ষ)|(ক্?((ক্স)|ষ)))",
                    rules: []
                }, {
                    find: "k",
                    replace: "ক",
                    rules: []
                }, {
                    find: "lkh",
                    replace: "((ল্?(খ|(ক্ষ)|(ক্?(হ|ঃ|(হ্‌?)))))|((ল্?ক)্?(হ|ঃ|(হ্‌?)))|(ল্?ক্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "lgh",
                    replace: "((ল্?(ঘ|((গ|(জ্ঞ))্?(হ|ঃ|(হ্‌?)))))|((ল্?(গ|(জ্ঞ)))্?(হ|ঃ|(হ্‌?)))|(ল্?(গ|(জ্ঞ))্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "lph",
                    replace: "((ল্?(ফ|(প্?(হ|ঃ|(হ্‌?)))))|((ল্?প)্?(হ|ঃ|(হ্‌?)))|(ল্?প্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "ldh",
                    replace: "((ল্?(ধ|ঢ|([দড]্?(হ|ঃ|(হ্‌?)))))|((ল্?[দড])্?(হ|ঃ|(হ্‌?)))|(ল্?[দড]্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "lbh",
                    replace: "((ল্?(ভ|(ব্?(হ|ঃ|(হ্‌?)))))|((ল্?ব)্?(হ|ঃ|(হ্‌?)))|(ল্?ব্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "ll",
                    replace: "((হ্ল)|(ল?্?ল)|(ল্?ল))",
                    rules: []
                }, {
                    find: "lk",
                    replace: "(ল্?ক)",
                    rules: []
                }, {
                    find: "lg",
                    replace: "(ল্?(গ|(জ্ঞ)))",
                    rules: []
                }, {
                    find: "lp",
                    replace: "(ল্?প)",
                    rules: []
                }, {
                    find: "ld",
                    replace: "(ল্?[দড])",
                    rules: []
                }, {
                    find: "lb",
                    replace: "(ল্?ব)",
                    rules: []
                }, {
                    find: "l",
                    replace: "ল",
                    rules: []
                }, {
                    find: "mbh",
                    replace: "((ম্?(ভ|(ব্?(হ|ঃ|(হ্‌?)))))|((ম্?ব)্?(হ|ঃ|(হ্‌?)))|(ম্?ব্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "mph",
                    replace: "((ম্?(ফ|(প্?(হ|ঃ|(হ্‌?)))))|((ম্?প)্?(হ|ঃ|(হ্‌?)))|(ম্?প্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "mth",
                    replace: "((ম্?(থ|ঠ|([তটৎ]্?(হ|ঃ|(হ্‌?)))))|((ম্?[তটৎ])্?(হ|ঃ|(হ্‌?)))|(ম্?[তটৎ]্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "mm",
                    replace: "((হ্ম)|(ম্?ম?))",
                    rules: []
                }, {
                    find: "mb",
                    replace: "(ম্?ব)",
                    rules: []
                }, {
                    find: "mp",
                    replace: "(ম্?প)",
                    rules: []
                }, {
                    find: "mt",
                    replace: "(ম্?[তটৎ])",
                    rules: []
                }, {
                    find: "m",
                    replace: "ম",
                    rules: []
                }, {
                    find: "ngksh",
                    replace: "(((((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?ক)|([নণঁঙঞং]্?(গ|(জ্ঞ))্?ক))্?(স|শ|ষ|([সশষ]্?(হ|ঃ|(হ্‌?)))))|((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?ক্?(স|শ|ষ|([সশষ]্?(হ|ঃ|(হ্‌?)))))|((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?((ক্?(স|শ|ষ|([সশষ]্?(হ|ঃ|(হ্‌?)))))|((ক্?[সশষ])্?(হ|ঃ|(হ্‌?)))|(ক্?[সশষ]্?(হ|ঃ|(হ্‌?)))))|((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?(ক্?[সশষ])্?(হ|ঃ|(হ্‌?)))|([নণঁঙঞং]্?(গ|(জ্ঞ))্?ক্?[সশষ]্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "ngkkh",
                    replace: "(((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?((ক্ষ)|((ক্?ক?)্?(হ|ঃ|(হ্‌?)))|(ক?্?(খ|(ক্ষ)|(ক্?(হ|ঃ|(হ্‌?)))))|(ক্?ক্?(হ|ঃ|(হ্‌?)))))|((((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?ক)|([নণঁঙঞং]্?(গ|(জ্ঞ))্?ক))্?(খ|(ক্ষ)|(ক্?(হ|ঃ|(হ্‌?)))))|((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?ক্?(খ|(ক্ষ)|(ক্?(হ|ঃ|(হ্‌?)))))|((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?(ক্?ক?)্?(হ|ঃ|(হ্‌?)))|([নণঁঙঞং]্?(গ|(জ্ঞ))্?ক্?ক্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "ngch",
                    replace: "(((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?(চ|ছ|([চছ]্?(হ|ঃ|(হ্‌?)))))|((((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?[চছ])|([নণঁঙঞং]্?(গ|(জ্ঞ))্?[চছ]))্?(হ|ঃ|(হ্‌?)))|([নণঁঙঞং]্?(গ|(জ্ঞ))্?[চছ]্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "nggh",
                    replace: "(((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?(ঘ|((গ|(জ্ঞ))্?(হ|ঃ|(হ্‌?)))))|([নণঁঙঞং]্?((জ্ঞ)|((গ|(জ্ঞ))্?((গ|(জ্ঞ)))?))্?(হ|ঃ|(হ্‌?)))|([নণঁঙঞং]্?((((জ্ঞ)|((গ|(জ্ঞ))্?((গ|(জ্ঞ)))?))্?(হ|ঃ|(হ্‌?)))|((গ|(জ্ঞ))্?(ঘ|((গ|(জ্ঞ))্?(হ|ঃ|(হ্‌?)))))|((গ|(জ্ঞ))্?(গ|(জ্ঞ))্?(হ|ঃ|(হ্‌?)))))|([নণঁঙঞং]্?(গ|(জ্ঞ))্?(গ|(জ্ঞ))্?(হ|ঃ|(হ্‌?)))|((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?(গ|(জ্ঞ))্?(হ|ঃ|(হ্‌?)))|(((ঙ্গ)|((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?(গ|(জ্ঞ)))|([নণঁঙঞং]্?(গ|(জ্ঞ))্?(গ|(জ্ঞ))))্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "ngkx",
                    replace: "(((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?((ক্ষ)|(ক্?((ক্স)|ষ))))|((((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?ক)|([নণঁঙঞং]্?(গ|(জ্ঞ))্?ক))্?((ক্স)|ষ))|([নণঁঙঞং]্?(গ|(জ্ঞ))্?((ক্ষ)|(ক্?((ক্স)|ষ))))|([নণঁঙঞং]্?(গ|(জ্ঞ))্?ক্?((ক্স)|ষ)))",
                    rules: []
                }, {
                    find: "ngjh",
                    replace: "(((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?(ঝ|(([জয]|(জ়))্?(হ|ঃ|(হ্‌?)))))|((((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?([জয]|(জ়)))|([নণঁঙঞং]্?(গ|(জ্ঞ))্?([জয]|(জ়))))্?(হ|ঃ|(হ্‌?)))|([নণঁঙঞং]্?(গ|(জ্ঞ))্?([জয]|(জ়))্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "ngkh",
                    replace: "(((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?(খ|(ক্ষ)|(ক্?(হ|ঃ|(হ্‌?)))))|((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?ক্?(হ|ঃ|(হ্‌?)))|([নণঁঙঞং]্?(গ|(জ্ঞ))্?ক্?(হ|ঃ|(হ্‌?)))|((((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?ক)|([নণঁঙঞং]্?(গ|(জ্ঞ))্?ক))্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "nsh",
                    replace: "(([নণঁঙঞং]্?(স|শ|ষ|([সশষ]্?(হ|ঃ|(হ্‌?)))))|([নণঁঙঞং]্?[সশষ]্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "ndh",
                    replace: "(([নণঁঙঞং]্?(ধ|ঢ|([দড]্?(হ|ঃ|(হ্‌?)))))|(([নণঁঙঞং]্?[দড])্?(হ|ঃ|(হ্‌?)))|([নণঁঙঞং]্?[দড]্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "nkh",
                    replace: "(([নণঁঙঞং]্?(খ|(ক্ষ)|(ক্?(হ|ঃ|(হ্‌?)))))|(((ঙ্ক)|([নণঁঙঞং]্?ক))্?(হ|ঃ|(হ্‌?)))|([নণঁঙঞং]্?ক্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "nth",
                    replace: "(([নণঁঙঞং]্?(থ|ঠ|([তটৎ]্?(হ|ঃ|(হ্‌?)))))|(([নণঁঙঞং]্?[তটৎ])্?(হ|ঃ|(হ্‌?)))|([নণঁঙঞং]্?[তটৎ]্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "ngj",
                    replace: "(((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?([জয]|(জ়)))|([নণঁঙঞং]্?(গ|(জ্ঞ))্?([জয]|(জ়))))",
                    rules: []
                }, {
                    find: "ngm",
                    replace: "(((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?ম)|([নণঁঙঞং]্?(গ|(জ্ঞ))্?ম))",
                    rules: []
                }, {
                    find: "ngg",
                    replace: "((ঙ্গ)|((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?(গ|(জ্ঞ)))|([নণঁঙঞং]্?(গ|(জ্ঞ))্?(গ|(জ্ঞ))))",
                    rules: []
                }, {
                    find: "ngx",
                    replace: "(((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?((ক্স)|ষ))|([নণঁঙঞং]্?(গ|(জ্ঞ))্?((ক্স)|ষ)))",
                    rules: []
                }, {
                    find: "ngk",
                    replace: "(((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?ক)|([নণঁঙঞং]্?(গ|(জ্ঞ))্?ক))",
                    rules: []
                }, {
                    find: "ngh",
                    replace: "((ঙ্ঘ)|([নণঁঙঞং]্?(ঘ|((গ|(জ্ঞ))্?(হ|ঃ|(হ্‌?)))))|([নণঁঙঞং]্?(গ|(জ্ঞ))্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "nch",
                    replace: "(([নণঁঙঞং]্?(চ|ছ|([চছ]্?(হ|ঃ|(হ্‌?)))))|(((ঞ্চ)|([নণঁঙঞং]্?[চছ]))্?(হ|ঃ|(হ্‌?)))|([নণঁঙঞং]্?[চছ]্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "njh",
                    replace: "(([নণঁঙঞং]্?(ঝ|(([জয]|(জ়))্?(হ|ঃ|(হ্‌?)))))|(((ঞ্জ)|([নণঁঙঞং]্?([জয]|(জ়))))্?(হ|ঃ|(হ্‌?)))|([নণঁঙঞং]্?([জয]|(জ়))্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "ngc",
                    replace: "(((ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))্?[চছ])|([নণঁঙঞং]্?(গ|(জ্ঞ))্?[চছ]))",
                    rules: []
                }, {
                    find: "nc",
                    replace: "((ঞ্চ)|([নণঁঙঞং]্?[চছ]))",
                    rules: []
                }, {
                    find: "nn",
                    replace: "((হ্ণ)|(হ্ন)|([নণঁঙঞং]্?[নণঁঙঞং]?))",
                    rules: []
                }, {
                    find: "ng",
                    replace: "(ঙ|ং|ঞ|(ঙ্গ)|([নণঁঙঞং]্?(গ|(জ্ঞ))))",
                    rules: []
                }, {
                    find: "nk",
                    replace: "((ঙ্ক)|([নণঁঙঞং]্?ক))",
                    rules: []
                }, {
                    find: "nj",
                    replace: "((ঞ্জ)|([নণঁঙঞং]্?([জয]|(জ়))))",
                    rules: []
                }, {
                    find: "nd",
                    replace: "([নণঁঙঞং]্?[দড])",
                    rules: []
                }, {
                    find: "nt",
                    replace: "([নণঁঙঞং]্?[তটৎ])",
                    rules: []
                }, {
                    find: "n",
                    replace: "([নণঁঙঞং])",
                    rules: []
                }, {
                    find: "oo",
                    replace: "((([উঊুূ]|(য়[ুূ])))|(([ওোঅ]|(অ্য)|(য়ো?))?([ওোঅ]|(অ্য)|(য়ো?))?))",
                    rules: []
                }, {
                    find: "oi",
                    replace: "(ঐ|ৈ|(([ওোঅ]|(অ্য)|(য়ো?))?([ইঈিী]|(য়[িী]))))",
                    rules: []
                }, {
                    find: "ou",
                    replace: "(ঔ|ৌ|(([ওোঅ]|(অ্য)|(য়ো?))?([উঊুূ]|(য়[ুূ]))))",
                    rules: []
                }, {
                    find: "o",
                    replace: "(([ওোঅ]|(অ্য)|(য়ো?))?)",
                    rules: [{
                        matches: [{
                            type: "prefix",
                            scope: "punctuation",
                            value: "",
                            negative: "FALSE"
                        }],
                        replace: "([ওোঅ]|(অ্য)|(য়ো?))"
                    }]
                }, {
                    find: "phl",
                    replace: "(((ফ|(প্?(হ|ঃ|(হ্‌?))))্?ল)|(প্?((হ|ঃ|(হ্‌?))্?ল))|(প্?(হ|ঃ|(হ্‌?))্?ল))",
                    rules: []
                }, {
                    find: "ph",
                    replace: "(ফ|(প্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "pp",
                    replace: "(প্?প?)",
                    rules: []
                }, {
                    find: "p",
                    replace: "প",
                    rules: []
                }, {
                    find: "qq",
                    replace: "(ক্?ক?)",
                    rules: []
                }, {
                    find: "q",
                    replace: "ক",
                    rules: []
                }, {
                    find: "rri",
                    replace: "(ঋ|ৃ|(([রড়ঢ়]|(হ্র))([রড়ঢ়]|(হ্র))([ইঈিী]|(য়[িী]))))",
                    rules: []
                }, {
                    find: "ri",
                    replace: "(ঋ|ৃ|(হৃ)|(([রড়ঢ়]|(হ্র))([ইঈিী]|(য়[িী]))))",
                    rules: []
                }, {
                    find: "rh",
                    replace: "((([রড়ঢ়]|(হ্র)))|(([রড়ঢ়]|(হ্র))্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "r",
                    replace: "([রড়ঢ়]|(হ্র))",
                    rules: []
                }, {
                    find: "shsh",
                    replace: "((((স|শ|ষ|([সশষ]্?(হ|ঃ|(হ্‌?)))))?্?(স|শ|ষ|([সশষ]্?(হ|ঃ|(হ্‌?)))))|([সশষ]্?(হ|ঃ|(হ্‌?))্?[সশষ]্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "ssh",
                    replace: "(([সশষ]?্?(স|শ|ষ|([সশষ]্?(হ|ঃ|(হ্‌?)))))|([সশষ]্?[সশষ]্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "shm",
                    replace: "(((স|শ|ষ|([সশষ]্?(হ|ঃ|(হ্‌?))))্?ম)|([সশষ]্?((হ|ঃ|(হ্‌?))্?ম))|([সশষ]্?(হ|ঃ|(হ্‌?))্?ম))",
                    rules: []
                }, {
                    find: "shn",
                    replace: "(((স|শ|ষ|([সশষ]্?(হ|ঃ|(হ্‌?))))্?[নণঁঙঞং])|([সশষ]্?((হ|ঃ|(হ্‌?))্?[নণঁঙঞং]))|([সশষ]্?(হ|ঃ|(হ্‌?))্?[নণঁঙঞং]))",
                    rules: []
                }, {
                    find: "ss",
                    replace: "([সশষ]্?[সশষ]?)",
                    rules: []
                }, {
                    find: "sh",
                    replace: "(স|শ|ষ|([সশষ]্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "s",
                    replace: "([সশষ])",
                    rules: []
                }, {
                    find: "thth",
                    replace: "((ত্থ)|(((থ|ঠ|([তটৎ]্?(হ|ঃ|(হ্‌?)))))?্?(থ|ঠ|([তটৎ]্?(হ|ঃ|(হ্‌?)))))|([তটৎ]্?(হ|ঃ|(হ্‌?))্?[তটৎ]্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "tth",
                    replace: "(([তটৎ]?্?(থ|ঠ|([তটৎ]্?(হ|ঃ|(হ্‌?)))))|(([তটৎ]্?[তটৎ]?)্?(হ|ঃ|(হ্‌?)))|([তটৎ]্?[তটৎ]্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "t``",
                    replace: "ৎ",
                    rules: []
                }, {
                    find: "tth",
                    replace: "((([তটৎ]?(্?)(থ|ঠ|([তটৎ](্?)(হ|ঃ|(হ্‌?)))))|(([তটৎ](্?)[তটৎ]?)(্?)(হ|ঃ|(হ্‌?)))|([তটৎ](্?)[তটৎ](্?)(হ|ঃ|(হ্‌?)))))",
                    rules: []
                }, {
                    find: "tt",
                    replace: "([তটৎ]্?[তটৎ]?)",
                    rules: []
                }, {
                    find: "th",
                    replace: "(থ|ঠ|([তটৎ]্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "t",
                    replace: "([তটৎ])",
                    rules: []
                }, {
                    find: "uu",
                    replace: "(ঊ|ূ|(([উঊুূ]|(য়[ুূ]))(([উঊুূ]|(য়[ুূ])))?))",
                    rules: []
                }, {
                    find: "u",
                    replace: "([উঊুূ]|(য়[ুূ]))",
                    rules: []
                }, {
                    find: "vv",
                    replace: "(ভ্?ভ?)",
                    rules: []
                }, {
                    find: "v",
                    replace: "ভ",
                    rules: []
                }, {
                    find: "w",
                    replace: "(ও|(ওয়)|(্ব))",
                    rules: []
                }, {
                    find: "xm",
                    replace: "(((ক্স)|ষ)্?ম)",
                    rules: []
                }, {
                    find: "xn",
                    replace: "(((ক্স)|ষ)্?[নণঁঙঞং])",
                    rules: []
                }, {
                    find: "x",
                    replace: "((ক্স)|ষ)",
                    rules: []
                }, {
                    find: "y",
                    replace: "(য়|(ইয়)|([‌‍]?্য))",
                    rules: []
                }, {
                    find: "zzh",
                    replace: "((হ্য)|((জ|য|(জ়)|([‌‍]?্য))্?(ঝ|(([জয]|(জ়))্?(হ|ঃ|(হ্‌?)))))|(((হ্য)|((জ|য|(জ়)|([‌‍]?্য))্?((জ|য|(জ়)|([‌‍]?্য)))?))্?(হ|ঃ|(হ্‌?)))|((জ|য|(জ়)|([‌‍]?্য))্?(জ|য|(জ়)|([‌‍]?্য))্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "zh",
                    replace: "(ঝ|(([জয]|(জ়))্?(হ|ঃ|(হ্‌?))))",
                    rules: []
                }, {
                    find: "zz",
                    replace: "((হ্য)|((জ|য|(জ়)|([‌‍]?্য))্?((জ|য|(জ়)|([‌‍]?্য)))?))",
                    rules: []
                }, {
                    find: "z",
                    replace: "(জ|য|(জ়)|([‌‍]?্য))",
                    rules: []
                }, {
                    find: "0",
                    replace: "(০|(0)|(শূন্য))",
                    rules: []
                }, {
                    find: "1",
                    replace: "(১|(1)|(এক))",
                    rules: []
                }, {
                    find: "2",
                    replace: "(২|(2)|(দুই))",
                    rules: []
                }, {
                    find: "3",
                    replace: "(৩|(3)|(তিন))",
                    rules: []
                }, {
                    find: "4",
                    replace: "(৪|(4)|(চার))",
                    rules: []
                }, {
                    find: "5",
                    replace: "(৫|(5)|(পাঁচ))",
                    rules: []
                }, {
                    find: "6",
                    replace: "((6)|৬|(ছয়))",
                    rules: []
                }, {
                    find: "7",
                    replace: "(৭|(7)|(সাত))",
                    rules: []
                }, {
                    find: "8",
                    replace: "(৮|(8)|(আট))",
                    rules: []
                }, {
                    find: "9",
                    replace: "(৯|(9)|(নয়))",
                    rules: []
                }, {
                    find: "`",
                    replace: "",
                    rules: []
                }],
                vowel: "aeiou",
                consonant: "bcdfghjklmnpqrstvwxyz",
                ignore: "|()[]{}^$*+?.~!@#%&-_='\";<>/\\,:`"
            }
        };
        p({
            AvroRegex: z
        });
        m = "dbsearch";
        var G = h.avrodict,
            H = h.avroregexlib;
        A.prototype = {
            search: function(a) {
                var b = [];
                switch (a.toLowerCase().charAt(0)) {
                    case "a":
                        b = "a aa e oi o nya y".split(" ");
                        break;
                    case "b":
                        b = ["b", "bh"];
                        break;
                    case "c":
                        b = ["c", "ch", "k"];
                        break;
                    case "d":
                        b = ["d", "dh", "dd", "ddh"];
                        break;
                    case "e":
                        b = ["i", "ii", "e", "y"];
                        break;
                    case "f":
                        b = ["ph"];
                        break;
                    case "g":
                        b = ["g", "gh", "j"];
                        break;
                    case "h":
                        b = ["h"];
                        break;
                    case "i":
                        b = ["i", "ii", "y"];
                        break;
                    case "j":
                        b = ["j", "jh", "z"];
                        break;
                    case "k":
                        b = ["k", "kh"];
                        break;
                    case "l":
                        b = ["l"];
                        break;
                    case "m":
                        b = ["h", "m"];
                        break;
                    case "n":
                        b = ["n", "nya", "nga", "nn"];
                        break;
                    case "o":
                        b = "a u uu oi o ou y".split(" ");
                        break;
                    case "p":
                        b = ["p", "ph"];
                        break;
                    case "q":
                        b = ["k"];
                        break;
                    case "r":
                        b = ["rri", "h", "r", "rr", "rrh"];
                        break;
                    case "s":
                        b = ["s", "sh", "ss"];
                        break;
                    case "t":
                        b = ["t", "th", "tt", "tth", "khandatta"];
                        break;
                    case "u":
                        b = ["u", "uu", "y"];
                        break;
                    case "v":
                        b = ["bh"];
                        break;
                    case "w":
                        b = ["o"];
                        break;
                    case "x":
                        b = ["e", "k"];
                        break;
                    case "y":
                        b = ["i", "y"];
                        break;
                    case "z":
                        b = ["h", "j", "jh", "z"]
                }
                a = this._regex.parse(a);
                a = "^" + a + "$";
                var c = [];
                for (i in b) c = c.concat(this._searchInArray(a, G.tables["w_" + b[i]]));
                return c
            },
            _searchInArray: function(a, b) {
                var c = [],
                    d = "",
                    e = RegExp(a);
                for (w in b) d = b[w], e.test(d) && c.push(d);
                return c
            },
            _printWords: function(a) {
                a = this.search(a);
                for (w in a) console.log(a[w])
            },
            _init: function() {
                this._regex = new H.AvroRegex
            }
        };
        p({
            DBSearch: A
        });
        m = "suggestionbuilder";
        var I = h.dbsearch,
            t = h.autocorrect.db,
            D = h.avrolib.OmicronLab.Avro.Phonetic,
            E = h.levenshtein,
            F = h.suffixdict.db;
        B.prototype = {
            _init: function() {
                this._dbSearch = new I.DBSearch;
                this._candidateSelections = this._loadCandidateSelectionsFromFile();
                this._phoneticCache = {};
                this._tempCache = {};
                this._pref = this._defaultPref()
            },
            _defaultPref: function() {
                return {
                    dictEnable: !0
                }
            },
            _getDictionarySuggestion: function(a) {
                var b = [];
                a = a.middle.toLowerCase();
                return b = this._phoneticCache[a] ? this._phoneticCache[a].slice(0) :
                    this._dbSearch.search(a)
            },
            _getClassicPhonetic: function(a) {
                return C.utf8Decode(D.parse(a))
            },
            _correctCase: function(a) {
                return D.fixString(a)
            },
            _getAutocorrect: function(a, b) {
                var c = {};
                if (t[a]) t[a] == a ? (c.corrected = a, c.exact = !0) : (c.corrected = this._getClassicPhonetic(t[a]), c.exact = !1);
                else {
                    var d = this._correctCase(b.middle);
                    t[d] && (c.corrected = this._getClassicPhonetic(t[d]), c.exact = !1)
                }
                return c
            },
            _separatePadding: function(a) {
                a = a.match(/(^(?::`|\.`|[\-\]~!@#%&*()_=+[{}'";<>\/?|.,])*?(?=(?:,{2,}))|^(?::`|\.`|[\-\]~!@#%&*()_=+[{}'";<>\/?|.,])*)(.*?(?:,,)*)((?::`|\.`|[\-\]~!@#%&*()_=+[{}'";<>\/?|.,])*$)/);
                var b = {};
                b.begin = a[1];
                b.middle = a[2];
                b.end = a[3];
                return b
            },
            _sortByPhoneticRelevance: function(a, b) {
                var c = b.slice(0);
                c.sort(function(b, c) {
                    var g = E.levenshtein(a, b),
                        n = E.levenshtein(a, c);
                    return g < n ? -1 : g > n ? 1 : 0
                });
                return c
            },
            _addToArray: function(a, b) {
                -1 == a.indexOf(b) && a.push(b)
            },
            _convertToUnicodeValue: function(a) {
                for (var b = "", c = 0; c < a.length; c++) var d = a.charCodeAt(c),
                    b = 255 <= d ? b + ("\\u0" + d.toString(16)) : b + a.charAt(c);
                return b
            },
            _isKar: function(a) {
                if (1 > a.length) return !1;
                a = a.charAt(0);
                return /^[\u09be\u09bf\u09c0\u09c1\u09c2\u09c3\u09c7\u09c8\u09cb\u09cc\u09c4]$/.test(a)
            },
            _isVowel: function(a) {
                if (1 > a.length) return !1;
                a = a.charAt(0);
                return /^[\u0985\u0986\u0987\u0988\u0989\u098a\u098b\u098f\u0990\u0993\u0994\u098c\u09e1\u09be\u09bf\u09c0\u09c1\u09c2\u09c3\u09c7\u09c8\u09cb\u09cc]$/.test(a)
            },
            _addToTempCache: function(a, b, c) {
                this._tempCache[a] || (this._tempCache[a] = {}, this._tempCache[a].base = b, this._tempCache[a].eng = c)
            },
            _addSuffix: function(a) {
                var b = [],
                    c = "";
                a = a.middle.toLowerCase();
                var d = a.length,
                    e = [];
                this._phoneticCache[a] && (e = this._phoneticCache[a].slice(0));
                this._tempCache = {};
                if (2 <= d)
                    for (var g = 1; g <= d; g++) {
                        var n = a.substr(g, d),
                            k = F[n];
                        if (k && (n = a.substr(0, a.length - n.length), this._phoneticCache[n])) {
                            for (var m = 0; m < this._phoneticCache[n].length; m++) {
                                var h = this._phoneticCache[n][m],
                                    c = h.substr(-1),
                                    p = k.substr(0, 1);
                                this._isVowel(c) && this._isKar(p) ? (c = h + "য়" + k, b.push(c), this._addToTempCache(c, h, n)) : "ৎ" == c ? (c = h.substr(0, h.length - 1) + "ত" + k, b.push(c), this._addToTempCache(c, h, n)) : "ং" == c ? (c = h.substr(0, h.length - 1) + "ঙ" + k, b.push(c)) : (c = h + k, b.push(c), this._addToTempCache(c, h, n))
                            }
                            for (i in b) e.push(b[i])
                        }
                    }
                return e
            },
            _joinSuggestion: function(a, b, c, d) {
                var e = [];
                if (this._pref.dictEnable) {
                    a.corrected && (e.push(a.corrected), a.exact || b.push(a.corrected));
                    this._phoneticCache[d.middle.toLowerCase()] || 0 < b.length && (this._phoneticCache[d.middle.toLowerCase()] = b.slice(0));
                    b = this._addSuffix(d);
                    b = this._sortByPhoneticRelevance(c, b);
                    for (i in b) this._addToArray(e, b[i]);
                    this._addToArray(e, c);
                    c = {};
                    c.prevSelection = this._getPreviousSelection(d, e);
                    for (i in e) a.exact ? a.corrected != e[i] && (e[i] = d.begin + e[i] + d.end) : e[i] = d.begin + e[i] + d.end;
                    c.words = e
                } else e.push(c), e[0] = d.begin + e[0] + d.end, c = {}, c.words = e, c.prevSelection = 0;
                return c
            },
            _getPreviousSelection: function(a, b) {
                var c = a.middle,
                    d = c.length,
                    e = "";
                if (this._candidateSelections[c]) e = this._candidateSelections[c];
                else if (2 <= d)
                    for (var g = 1; g < d; g++) {
                        var h = c.substr(-g).toLowerCase(),
                            k = F[h];
                        if (k && (h = c.substr(0, c.length - h.length), this._candidateSelections[h])) {
                            d = this._candidateSelections[h];
                            e = d.substr(-1);
                            g = k.substr(0, 1);
                            e = this._isVowel(e) && this._isKar(g) ? d + "য়" + k : "ৎ" == e ? d.substr(0, d.length - 1) +
                                "ত" + k : "ং" == e ? d.substr(0, d.length - 1) + "ঙ" + k : d + k;
                            this._updateCandidateSelection(c, e);
                            break
                        }
                    }
                c = b.indexOf(e);
                return 0 > c ? 0 : c
            },
            _loadCandidateSelectionsFromFile: function() {
                return {}
            },
            _saveCandidateSelectionsToFile: function() {},
            _updateCandidateSelection: function(a, b) {
                this._candidateSelections[a] = b
            },
            _logger: function(a, b) {
                var c = (b || "Log") + ": " + JSON.stringify(a, null, "\t");
                console.log(c)
            },
            getPref: function() {
                return this._pref
            },
            setPref: function(a) {
                this._pref = a
            },
            stringCommitted: function(a, b) {
                if (this._pref.dictEnable) {
                    if (this._tempCache[b]) {
                        var c =
                            this._tempCache[b].base,
                            d = this._tempCache[b].eng;
                        this._candidateSelections[d] || (this._candidateSelections[d] = c, this._saveCandidateSelectionsToFile(this._candidateSelections))
                    }
                    this._saveCandidateSelectionsToFile(this._candidateSelections)
                }
            },
            updateCandidateSelection: function(a, b) {
                if (this._pref.dictEnable) {
                    var c = this._separatePadding(a);
                    this._updateCandidateSelection(c.middle, b)
                }
            },
            suggest: function(a) {
                var b = this._separatePadding(a);
                b.begin = this._getClassicPhonetic(b.begin);
                b.end = this._getClassicPhonetic(b.end);
                var c = this._getClassicPhonetic(b.middle);
                if (this._pref.dictEnable) var d = this._getDictionarySuggestion(b),
                    e = this._getAutocorrect(a, b);
                return this._joinSuggestion(e, d, c, b)
            }
        };
        p({
            SuggestionBuilder: B
        });
        var u = new h.suggestionbuilder.SuggestionBuilder(v, x, y);
        return {
            suggest: function(a) {
                return u.suggest(a)
            },
            commit: function(a, b) {
                u.updateCandidateSelection(a, b);
                u.stringCommitted(a, b)
            },
            candidate: function(a) {
                return u._candidateSelections[a]
            },
            version: "" + h.version
        }
    }(v, x, y)
};
